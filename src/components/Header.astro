---
import Avatar from "./Avatar.astro";
import AvatarContainer from "./AvatarContainer.astro";
import Container from "./Container.astro";
import DesktopNavigation from "./DesktopNavigation.astro";
import { ThemeToggle } from "./ThemeToggle";

const routes = [
  { path: "/about", name: "About" },
  { path: "/articles", name: "Articles" },
  { path: "/projects", name: "Projects" },
];

const isNotHome = new URL(Astro.request.url).pathname.slice(1);
---

<header
  class="pointer-events-none z-50 flex flex-col"
  style="height: var(--header-height); margin-bottom: var(--header-mb)"
>
  <div
    id="header"
    class="top-0 z-10 h-16 pt-6"
    style="position: var(--header-position)"
  >
    <Container class="top-[var(--header-top,theme(spacing.6))] w-full">
      <div class="relative flex gap-4 items-center">
        <div class="flex flex-1">
          {
            isNotHome && (
              <AvatarContainer>
                <Avatar />
              </AvatarContainer>
            )
          }
        </div>
        <div class="flex flex-1 justify-center">
          <DesktopNavigation routes={routes} class="pointer-events-auto" />
        </div>
        <div class="flex justify-end flex-1">
          <div class="pointer-events-auto">
            <ThemeToggle client:load />
          </div>
        </div>
      </div>
    </Container>
  </div>
</header>

<script is:inline>
  const $ = (el) => document.querySelector(el);
  let downDelay = $("#avatar")?.offsetTop ?? 0;
  let isInitial = true;
  let upDelay = 64;

  function setProperty(property, value) {
    document.documentElement.style.setProperty(property, value);
  }

  function removeProperty(property) {
    document.documentElement.style.removeProperty(property);
  }

  function clamp(number, a, b) {
    let min = Math.min(a, b);
    let max = Math.max(a, b);
    return Math.min(Math.max(number, min), max);
  }

  function updateHeaderStyles() {
    let { top, height } = $("#header").getBoundingClientRect();
    let scrollY = clamp(
      window.scrollY,
      0,
      document.body.scrollHeight - window.innerHeight
    );

    if (isInitial) {
      setProperty("--header-position", "sticky");
    }

    if (isInitial || scrollY < downDelay) {
      setProperty("--header-height", `${downDelay + height}px`);
      setProperty("--header-mb", `${-downDelay}px`);
    } else if (top + height < -upDelay) {
      let offset = Math.max(height, scrollY - upDelay);
      setProperty("--header-height", `${offset}px`);
      setProperty("--header-mb", `${height - offset}px`);
    } else if (top === 0) {
      setProperty("--header-height", `${scrollY + height}px`);
      setProperty("--header-mb", `${-scrollY}px`);
    }

    if (top === 0 && scrollY > 0 && scrollY >= downDelay) {
      setProperty("--header-inner-position", "fixed");
      removeProperty("--header-top");
    } else {
      removeProperty("--header-inner-position");
      setProperty("--header-top", "0px");
    }
  }

  function updateStyles() {
    updateHeaderStyles();
    isInitial = false;
  }

  updateStyles();
  window.addEventListener("scroll", updateStyles, { passive: true });
  window.addEventListener("resize", updateStyles);
</script>
