---
import Avatar from "./Avatar.astro";
import AvatarContainer from "./AvatarContainer.astro";
import Container from "./Container.astro";
import DesktopNavigation from "./DesktopNavigation.astro";
import { ThemeToggle } from "./ThemeToggle";

const routes = [
  { path: "/about", name: "About" },
  { path: "/articles", name: "Articles" },
  { path: "/projects", name: "Projects" },
];

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1);
const isHomePage = currentPath === "";
---

<header
  class="pointer-events-none z-50 flex flex-col"
  style="height: var(--header-height); margin-bottom: var(--header-mb)"
>
  {
    isHomePage && (
      <>
        <div
          id="avatar"
          class="order-last mt-[calc(theme(spacing.16)-theme(spacing.3))]"
        />
        <Container
          class="top-0 order-last -mb-3 h-20 pt-3"
          style="position: var(--header-position)"
        >
          <div
            class="top-[var(--avatar-top,theme(spacing.3))] w-full"
            style="position: var(--header-inner-position)"
          >
            <div class="relative">
              <AvatarContainer
                class="absolute left-0 top-3 origin-left transition-opacity"
                style="opacity:var(--avatar-border-opacity, 0);transform:var(--avatar-border-transform)"
              />
              <Avatar
                large={true}
                class="block h-16 w-16 origin-left"
                style="transform:var(--avatar-image-transform)"
              />
            </div>
          </div>
        </Container>
      </>
    )
  }
  <div
    id="header"
    class="top-0 z-10 h-16 pt-6"
    style="position: var(--header-position)"
  >
    <Container class="top-[var(--header-top,theme(spacing.6))] w-full">
      <div class="relative flex gap-4 items-center">
        <div class="flex flex-1">
          {
            !isHomePage && (
              <AvatarContainer>
                <Avatar />
              </AvatarContainer>
            )
          }
        </div>
        <div class="flex flex-1 justify-center">
          <DesktopNavigation routes={routes} class="pointer-events-auto" />
        </div>
        <div class="flex justify-end flex-1">
          <div class="pointer-events-auto">
            <ThemeToggle client:load />
          </div>
        </div>
      </div>
    </Container>
  </div>
</header>

{isHomePage && <div style="height: var(--content-offset)" />}

<script is:inline>
  const $ = (el) => document.querySelector(el);

  let downDelay = $("#avatar").offsetTop ?? 0;
  let isInitial = true;
  let upDelay = 64;

  function setProperty(property, value) {
    document.documentElement.style.setProperty(property, value);
  }

  function removeProperty(property) {
    document.documentElement.style.removeProperty(property);
  }

  function clamp(number, a, b) {
    let min = Math.min(a, b);
    let max = Math.max(a, b);
    return Math.min(Math.max(number, min), max);
  }

  function updateHeaderStyles() {
    let { top, height } = $("#header").getBoundingClientRect();

    let scrollY = clamp(
      window.scrollY,
      0,
      document.body.scrollHeight - window.innerHeight
    );

    if (isInitial) {
      setProperty("--header-position", "sticky");
    }
    setProperty("--content-offset", `${downDelay}px`);
    if (isInitial || scrollY < downDelay) {
      setProperty("--header-height", `${downDelay + height}px`);
      setProperty("--header-mb", `${-downDelay}px`);
    } else if (top + height < -upDelay) {
      let offset = Math.max(height, scrollY - upDelay);
      setProperty("--header-height", `${offset}px`);
      setProperty("--header-mb", `${height - offset}px`);
    } else if (top === 0) {
      setProperty("--header-height", `${scrollY + height}px`);
      setProperty("--header-mb", `${-scrollY}px`);
    }

    if (top === 0 && scrollY > 0 && scrollY >= downDelay) {
      setProperty("--header-inner-position", "fixed");
      removeProperty("--header-top");
      removeProperty("--avatar-top");
    } else {
      removeProperty("--header-inner-position");
      setProperty("--header-top", "0px");
      setProperty("--avatar-top", "0px");
    }
  }

  function updateAvatarStyles() {
    if (!true) {
      return;
    }

    let fromScale = 1;
    let toScale = 36 / 64;
    let fromX = 0;
    let toX = 2 / 16;

    let scrollY = downDelay - window.scrollY;

    let scale = (scrollY * (fromScale - toScale)) / downDelay + toScale;
    scale = clamp(scale, fromScale, toScale);

    let x = (scrollY * (fromX - toX)) / downDelay + toX;
    x = clamp(x, fromX, toX);

    setProperty(
      "--avatar-image-transform",
      `translate3d(${x}rem, 0, 0) scale(${scale})`
    );

    let borderScale = 1 / (toScale / scale);
    let borderX = (-toX + x) * borderScale;
    let borderTransform = `translate3d(${borderX}rem, 0, 0) scale(${borderScale})`;

    setProperty("--avatar-border-transform", borderTransform);
    setProperty("--avatar-border-opacity", scale === toScale ? "1" : "0");
  }

  function updateStyles() {
    updateHeaderStyles();
    updateAvatarStyles();
    isInitial = false;
  }

  updateStyles();

  window.addEventListener("scroll", updateStyles, { passive: true });
  window.addEventListener("resize", updateStyles);
</script>
